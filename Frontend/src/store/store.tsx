import { configureStore } from "@reduxjs/toolkit";
import api from "./ApiSlice";
import MyProductsAPI from "./MyProductsApiSlice";

import { CartSliceReducer } from "./CartSlice";

const store = configureStore({
  //Just Understand This one thing You need to assign Reducers Generated by you in different slice to the Individual State Names that are being created by slice and you do that by assigning these reducers to the "reducerPaths" (for APISLICES) or "SliceStateNames" (for Slice States)
  reducer: {
    //consider them like individual Slice states which are being added to the Global Store/State (Understand in a practical Visual Way where you will see all these individual Primary States in your Reduc Dev Tools)
    // By assigning [api.reducerPath] and [MyProductsAPI.reducerPath] as keys in the reducer object, you ensure that the state of each slice is stored under its corresponding path in the store.

    // With this organization, you can easily access the state and actions of each slice using selectors and dispatching actions. For example:
    //   const users = useSelector((state) => state.api);         //THese are the state Names that you assigned to the particular idividual SLICE
    // const products = useSelector((state) => state.MyProductsAPI);    //THese are the state Names that you assigned to the particular idividual SLICE
    [api.reducerPath]: api.reducer,
    [MyProductsAPI.reducerPath]: MyProductsAPI.reducer,
    CartSliceState: CartSliceReducer,                       //Here CartSliceReducer is already containing the .reducer property coming from behind (you can follow the structer of defining all .reducer directly here also if want's more easier understanding and structer alright!!)         
  },  

  middleware: (getDefaultMiddleware) =>
    // api.middleware and MyProductsAPI.middleware: These are the middleware functions provided by RTK Query. They handle various aspects of API-related functionality, such as making API requests, handling caching and invalidation, and updating the state in the Redux store. By including these middleware functions in the Redux store configuration, you enable the API functionality provided by RTK Query.
    getDefaultMiddleware().concat(api.middleware, MyProductsAPI.middleware),
    // In the configureStore function, the middleware option is used to customize the middleware for the Redux store. The getDefaultMiddleware function provided by Redux Toolkit returns an array of default middleware functions. By using getDefaultMiddleware().concat(api.middleware, MyProductsAPI.middleware), you combine the default middleware with the middleware provided by RTK Query for the api slice and the MyProductsAPI slice.
});

export { store };
